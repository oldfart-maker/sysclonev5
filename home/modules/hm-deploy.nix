# modules/hm-deploy.nix
{ config, pkgs, lib, ... }:
{
  # Easy "did this activation come from THIS module?" probe
  home.file.".hm-marker".text = "hello from THIS build\n";

  home.packages = [ pkgs.git pkgs.bashInteractive ];
  home.sessionPath = [ "${config.home.homeDirectory}/.local/bin" ];

  home.file.".local/bin/hm-update" = {
    executable = true;
    text = ''
      # ~/.local/bin/hm-update (generated by hm-deploy.nix)
      # shellcheck shell=bash
      set -Eeuo pipefail

      repo="$HOME/projects/sysclonev5"                   # <-- single, canonical path
      local_flake="path:$repo/home#username"            # <-- bypass registry
      remote_flake="github:oldfart-maker/sysclonev5?dir=home&ref=main#username"

      usage() {
        cat <<EOF
Usage: hm-update [--local|--remote] [--force]
  --local    Build from local working tree (no pull)
  --remote   Build from GitHub flake (?ref=main)
  --force    When pulling (default), hard reset to origin/<branch>
No flag = pull from origin then build local flake.
EOF
      }

      mode="pull"
      force=0
      for a in "$@"; do
        case "$a" in
          --local)  mode="local"  ;;
          --remote) mode="remote" ;;
          --force)  force=1       ;;
          -h|--help) usage; exit 0 ;;
          *) echo "Unknown arg: $a"; usage; exit 2 ;;
        esac
      done

      echo "[hm-update] repo: $repo"
      echo "[hm-update] mode: $mode"

      if [[ "$mode" == "remote" ]]; then
        echo "[hm-update] building remote flake: $remote_flake"
        nix run nixpkgs#home-manager -- switch --flake "$remote_flake" --refresh -v
        exit $?
      fi

      if [[ ! -f "$repo/home/flake.nix" ]]; then
        echo "[hm-update] ERROR: $repo/home/flake.nix not found"
        exit 3
      fi

      cd "$repo"
      branch="$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo main)"

      if [[ "$mode" == "pull" ]]; then
        echo "[hm-update] syncing branch: $branch"
        git fetch --prune --all
        if ! git rev-parse --abbrev-ref --symbolic-full-name '@{u}' >/dev/null 2>&1; then
          if git show-ref --verify --quiet "refs/remotes/origin/$branch"; then
            git branch --set-upstream-to "origin/$branch" "$branch"
          else
            git push -u origin "$branch"
          fi
        fi
        if [[ $force -eq 1 ]]; then
          echo "[hm-update] HARD reset to origin/$branch"
          git reset --hard "origin/$branch"
        else
          echo "[hm-update] Rebase onto origin/$branch"
          git pull --rebase --autostash
        fi
        git submodule update --init --recursive
      fi

      sha="$(git rev-parse --short HEAD || echo '?')"
      echo "[hm-update] building local flake @ $sha â†’ $local_flake"

      # Build & activate the exact derivation
      nix build "$local_flake" -o "$HOME/.cache/hm/result-activate"
      "$HOME/.cache/hm/result-activate/activate"
    '';
  };
}
